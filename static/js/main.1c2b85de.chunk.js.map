{"version":3,"sources":["Components/apis/index.js","Components/CitySearch/index.js","Components/Weather/CurrentWeather.js","Components/Weather/FiveDaysWeather.js","Components/Weather/index.js","Components/ErrorInfo/index.js","img/background-img.jpg","App.js","index.js"],"names":["API_KEY","process","CitySearch","submitText","handleSearchOnClick","handleCityChange","handleCountryChange","handleUnitOnChange","openWeather","showAlert","unit","show","useState","city","setCity","country","setCountry","useEffect","timeOut","setTimeout","clearTimeout","Form","className","onSubmit","e","preventDefault","Button","onClick","type","Group","FloatingLabel","controlId","label","Control","placeholder","onChange","target","value","autoFocus","required","href","rel","Check","name","inline","checked","CurrentWeather","data","Object","keys","length","constructor","weather","mainWeather","main","countryData","sys","cityName","wind","timeZone","timezone","sunrise","sunset","imgUrl","icon","displayTemp","displaySpeed","today","Date","getTime","capitalizeFirstLetter","str","charAt","toUpperCase","slice","style","fontSize","unix","format","tz","src","alt","Math","round","temp","description","id","temp_max","temp_min","feels_like","humidity","pressure","speed","gust","clouds","all","visibility","FiveDaysWeather","list","todayForecast","i","weatherData","timeUTC","dt","moment","utc","push","todayForecastChart","entry","entryChart","time","fiveDaysForecast3hrs","_","groupBy","shift","fiveDaysForecast","forEach","key","index","high","Number","MIN_VALUE","low","MAX_VALUE","max","min","dailyForecast","date","ResponsiveContainer","width","height","LineChart","Line","dataKey","stroke","des","XAxis","YAxis","Text","x","y","dx","dy","offset","angle","Tooltip","map","dt_txt","Weather","handleRefresh","handleChangeReport","forecast","active","setActive","classNameCurr","setClassNameCurr","classNameFiveDays","setClassNameFiveDays","Container","fluid","ListGroup","Item","as","Link","to","path","exact","from","marginTop","ErrorInfo","handleClose","error","Alert","variant","Heading","App","partOfDay","setWeather","setForecast","getHours","setTime","setOpenWeather","setShowAlert","setError","setUnit","refresh","setRefresh","report","setReport","showInput","setShowInput","Axios","get","getWeatherDataByCity","then","res","console","log","catch","response","cod","request","getWeatherData","get5daysWeatherByCity","get5daysWeatherData","axios","interceptors","use","status","Promise","reject","basename","backgroundImage","backgroundImg","backgroundSize","backgroundRepeat","backgroundPosition","newCity","newCountry","Fade","in","Collapse","val","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c2b85de.chunk.js","sourcesContent":["import Axios from \"axios\";\r\n\r\nconst API_KEY = process.env.REACT_APP_OPEN_WEATHER_API_KEY;\r\n\r\nexport const getWeatherData = (city, country, unit) =>\r\n  Axios.get(\r\n    `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=${unit}&appid=${API_KEY}`\r\n  );\r\n\r\nexport const getWeatherDataByCity = (city, unit) =>\r\n  Axios.get(\r\n    `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=${unit}&appid=${API_KEY}`\r\n  );\r\n\r\nexport const get5daysWeatherByCity = (city, unit) =>\r\n  Axios.get(\r\n    `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=${unit}&appid=${API_KEY}`\r\n  );\r\n\r\nexport const get5daysWeatherData = (city, country, unit) =>\r\n  Axios.get(\r\n    `https://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&units=${unit}&appid=${API_KEY}`\r\n  );\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Button, Form, FloatingLabel } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport default function CitySearch({\r\n  handleSearchOnClick,\r\n  handleCityChange,\r\n  handleCountryChange,\r\n  handleUnitOnChange,\r\n  openWeather,\r\n  showAlert,\r\n  unit,\r\n  show,\r\n}) {\r\n  //state to only trigger the onChanges when user stopped typing\r\n  const [city, setCity] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  //set the submit text of the btn\r\n  let submitText;\r\n  if (!openWeather && !showAlert) {\r\n    submitText = \"Show me the weather\";\r\n  } else {\r\n    submitText = \"Hide\";\r\n  }\r\n\r\n  //this effect will delay the onChange function of the city and country field\r\n  useEffect(() => {\r\n    //wait 1 second before sending the state up to the parent\r\n    const timeOut = setTimeout(() => {\r\n      handleCityChange(city);\r\n      handleCountryChange(country);\r\n    }, 850);\r\n    //clear the timeout when done\r\n    return () => {\r\n      clearTimeout(timeOut);\r\n    };\r\n  }, [city, country, handleCityChange, handleCountryChange]);\r\n\r\n  return (\r\n    <Form\r\n      className=\"container align-items-center \r\n            justify-content-center p-2 col-xs-12 col-md-7 col-lg-5\"\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n      }}\r\n    >\r\n      {/* if the weather component is showing, hide the input */}\r\n      <div className={show ? \"\" : \"d-none\"}>\r\n        <div className=\"d-flex justify-content-center\">\r\n          <Button\r\n            onClick={handleSearchOnClick}\r\n            aria-expanded=\"false\"\r\n            aria-controls=\"weather alert\"\r\n            type=\"submit\"\r\n          >\r\n            Use my current location\r\n          </Button>\r\n        </div>\r\n        <div className=\"d-flex justify-content-center\">\r\n          <span className=\"lead\">-----------OR-----------</span>\r\n        </div>\r\n        <Form.Group className=\"\">\r\n          <FloatingLabel\r\n            controlId=\"cityName\"\r\n            label=\"City name:\"\r\n            className=\"mb-3\"\r\n          >\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"City...\"\r\n              onChange={(e) => setCity(e.target.value)}\r\n              autoFocus\r\n              required\r\n            />\r\n          </FloatingLabel>\r\n          <FloatingLabel\r\n            controlId=\"countryCode\"\r\n            label=\"Country code (optional):\"\r\n          >\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Country code...\"\r\n              onChange={(e) => setCountry(e.target.value)}\r\n            />\r\n          </FloatingLabel>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <small className=\"form-text text-muted\">\r\n            Use country code for a more precise result. Refer to this{\" \"}\r\n            <a\r\n              href=\"https://www.iso.org/obp/ui/#home\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              link\r\n            </a>\r\n            &nbsp;for the country codes.\r\n          </small>\r\n        </Form.Group>\r\n\r\n        <div className=\"mt-2\">\r\n          <Form.Group className=\"d-flex justify-content-center\">\r\n            <Form.Check\r\n              name=\"unitRadio\"\r\n              inline\r\n              label=\"Metric\"\r\n              type=\"radio\"\r\n              onChange={handleUnitOnChange}\r\n              value=\"metric\"\r\n              checked={unit === \"metric\"}\r\n            />\r\n            <Form.Check\r\n              inline\r\n              label=\"Imperial\"\r\n              name=\"unitRadio\"\r\n              onChange={handleUnitOnChange}\r\n              type=\"radio\"\r\n              value=\"imperial\"\r\n              checked={unit === \"imperial\"}\r\n            />\r\n          </Form.Group>\r\n        </div>\r\n      </div>\r\n      <div className=\"d-flex justify-content-center\">\r\n        <Button\r\n          className=\"mt-1\"\r\n          onClick={handleSearchOnClick}\r\n          aria-expanded=\"false\"\r\n          aria-controls=\"weather alert\"\r\n          type=\"submit\"\r\n        >\r\n          {submitText}\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Moment from \"react-moment\";\r\nimport \"moment-timezone\";\r\n\r\nexport default function CurrentWeather({ data, unit }) {\r\n  //return null if no data\r\n  if (data && Object.keys(data).length === 0 && data.constructor === Object) {\r\n    return null;\r\n  }\r\n\r\n  //get the weather description and icon\r\n  const weather = data.weather[0];\r\n  //get the main weather from the data we passed\r\n  const mainWeather = data.main;\r\n  //get the data about the country\r\n  const countryData = data.sys;\r\n  //get the city name\r\n  const cityName = data.name;\r\n  //about the wind\r\n  const wind = data.wind;\r\n  //about the time zone\r\n  const timeZone = data.timezone;\r\n  //about the sunrise and sunset and convert to UTC\r\n  const sunrise = data.sys.sunrise + timeZone;\r\n  const sunset = data.sys.sunset + timeZone;\r\n\r\n  //get the url of the icon\r\n  const imgUrl = `http://openweathermap.org/img/wn/${weather.icon}.png`;\r\n\r\n  //unit is metric or imperial?\r\n  const displayTemp = unit === \"metric\" ? \"C\" : \"F\";\r\n  const displaySpeed =\r\n    unit === \"metric\" ? \"m/s (meter/sec)\" : \"mph (miles per hour)\";\r\n\r\n  //get the time in unix, convert it to local time using the timezone in the api\r\n  const today = (new Date().getTime() + timeZone * 1000) / 1000;\r\n\r\n  //capitalize the first letter in our returned weather cond\r\n  const capitalizeFirstLetter = (str) => {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p className=\"lead mb-0 text-center\" style={{ fontSize: \"2vh\" }}>\r\n        This is the current weather of {cityName}, {countryData.country} as\r\n        of&nbsp;\r\n        <Moment unix format=\"LLL\" tz=\"UTC\">\r\n          {today}\r\n        </Moment>{\" \"}\r\n        (local time):\r\n      </p>\r\n      <div\r\n        className=\"d-flex flex-row align-items-center \r\n                    justify-content-center\"\r\n      >\r\n        <img src={imgUrl} alt=\"weather condition\"></img>\r\n        <p className=\"h2 mb-0\">\r\n          {Math.round(mainWeather.temp)}°{displayTemp} -{\" \"}\r\n          {capitalizeFirstLetter(weather.description)}\r\n        </p>\r\n      </div>\r\n      <p className=\"text-center fs-6\">\r\n        {capitalizeFirstLetter(weather.description)} condition is forecasted for\r\n        now.\r\n      </p>\r\n      <div className=\"card d-flex justify-content-center\">\r\n        <div className=\"card-header\">\r\n          <span className=\"lead\">Detailed weather report:</span>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <div id=\"weatherInfo\">\r\n            <span className=\"text-muted\">High: </span>\r\n            <span>\r\n              {Math.round(mainWeather.temp_max)}°{displayTemp}.\r\n            </span>\r\n            <br />\r\n            <span className=\"text-muted\">Low: </span>\r\n            <span>\r\n              {Math.round(mainWeather.temp_min)}°{displayTemp}.\r\n            </span>\r\n            <br />\r\n            <span className=\"text-muted\">Feels like: </span>\r\n            <span>\r\n              {Math.round(mainWeather.feels_like)}°{displayTemp}.\r\n            </span>\r\n            <br />\r\n            <span className=\"text-muted\">Humidity: </span>\r\n            <span>{Math.round(mainWeather.humidity)}%.</span>\r\n            <br />\r\n            <span className=\"text-muted\">Atmospheric pressure: </span>\r\n            <span>{Math.round(mainWeather.pressure)} hPa.</span>\r\n            <hr />\r\n            <span className=\"text-muted\">Wind speed: </span>\r\n            <span>\r\n              {wind.speed} {displaySpeed}.\r\n            </span>\r\n            <br />\r\n            <span className=\"text-muted\">Wind gust: </span>\r\n            <span>\r\n              {wind.gust} {displaySpeed}.\r\n            </span>\r\n            <hr />\r\n            <span className=\"text-muted\">Cloudiness: </span>\r\n            <span>{data.clouds.all}%.</span>\r\n            <br />\r\n            <span className=\"text-muted\">Visibility: </span>\r\n            <span>{data.visibility / 1000} km.</span>\r\n            <hr />\r\n            <span className=\"text-muted\">Sunrise: </span>\r\n            <span>\r\n              <Moment unix format=\"LT\" tz=\"UTC\">\r\n                {sunrise}\r\n              </Moment>\r\n              .\r\n            </span>\r\n            <br />\r\n            <span className=\"text-muted\">Sunset: </span>\r\n            <span>\r\n              <Moment unix format=\"LT\" tz=\"UTC\">\r\n                {sunset}\r\n              </Moment>\r\n              .\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Moment from \"react-moment\";\r\nimport \"moment-timezone\";\r\nimport moment from \"moment\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  ResponsiveContainer,\r\n  XAxis,\r\n  Tooltip,\r\n  YAxis,\r\n  Text,\r\n} from \"recharts\";\r\nimport _ from \"lodash\";\r\n\r\nexport default function FiveDaysWeather({ data, unit }) {\r\n  //return null if no data\r\n  if (data && Object.keys(data).length === 0 && data.constructor === Object) {\r\n    return null;\r\n  }\r\n\r\n  const weather = data.list;\r\n  //get the city\r\n  const cityName = data.city.name;\r\n  //get the data about the country\r\n  const country = data.city.country;\r\n  //about the time zone\r\n  const timeZone = data.city.timezone;\r\n\r\n  //get the time in unix, convert it to local time using the timezone in the api\r\n  const today = (new Date().getTime() + timeZone * 1000) / 1000;\r\n\r\n  //unit is metric or imperial?\r\n  const displayTemp = unit === \"metric\" ? \"C\" : \"F\";\r\n\r\n  //capitalize the first letter in our returned weather cond\r\n  const capitalizeFirstLetter = (str) => {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  };\r\n\r\n  //today forecast\r\n  let todayForecast = [];\r\n\r\n  //get the today's weather\r\n  //since we have a maximum of 8 data per day, we only need to loop\r\n  //thru the first 8 elements to get the data\r\n  for (let i = 0; i < 8; i++) {\r\n    let weatherData = weather[i];\r\n    let timeUTC = weatherData.dt;\r\n    //if the weather date is today\r\n    if (\r\n      //convert to local time time (in const today) and compare\r\n      //if we have the same data then it's the today's weather\r\n      //and the next day weather till the current time\r\n      //today + 86400 means the next day (24 hours == 86400 sec)\r\n      moment\r\n        .unix(timeUTC + timeZone)\r\n        .utc()\r\n        .format(\"YYYY-MM-DD\") ===\r\n        moment.unix(today).utc().format(\"YYYY-MM-DD\") ||\r\n      moment\r\n        .unix(timeUTC + timeZone)\r\n        .utc()\r\n        .format(\"YYYY-MM-DD\") ===\r\n        moment\r\n          .unix(today + 86400)\r\n          .utc()\r\n          .format(\"YYYY-MM-DD\")\r\n    )\r\n      todayForecast.push(weatherData);\r\n  }\r\n\r\n  //add to the chart\r\n  let todayForecastChart = [];\r\n  for (const entry of todayForecast) {\r\n    //new obj storing less items\r\n    const entryChart = {\r\n      temp: entry.main.temp,\r\n      feels_like: entry.main.feels_like,\r\n      time: moment\r\n        .unix(entry.dt + timeZone)\r\n        .utc()\r\n        .format(\"HH:mm\"),\r\n    };\r\n    //push to the array\r\n    todayForecastChart.push(entryChart);\r\n  }\r\n\r\n  //use lodash groupBy function to extract each date from the data\r\n  const fiveDaysForecast3hrs = _.groupBy(weather, (entry) =>\r\n    moment\r\n      .unix(entry.dt + timeZone)\r\n      .utc()\r\n      .format(\"ddd\")\r\n  );\r\n\r\n  //convert to key's (date) array\r\n  const keys = Object.keys(fiveDaysForecast3hrs);\r\n\r\n  //remove the first date (today's date)\r\n  keys.shift();\r\n\r\n  let fiveDaysForecast = [];\r\n\r\n  keys.forEach((key, index) => {\r\n    //loop thru the weather by hours and get the avg high and low\r\n    let high = Number.MIN_VALUE;\r\n    let low = Number.MAX_VALUE;\r\n    //continue to loop thru the obj array\r\n    fiveDaysForecast3hrs[key].forEach((entry, index) => {\r\n      //find the high and low\r\n      high = Math.max(entry.main.temp_max, high);\r\n      low = Math.min(entry.main.temp_min, low);\r\n    });\r\n    //round the number\r\n    high = Math.round(high);\r\n    low = Math.round(low);\r\n    //construct an obj containing the daily forecast\r\n    const dailyForecast = {\r\n      date: key,\r\n      high: high,\r\n      low: low,\r\n    };\r\n    //add to the array\r\n    fiveDaysForecast.push(dailyForecast);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {/* display the local time */}\r\n      <p className=\"lead mb-0 text-center mb-3\" style={{ fontSize: \"2vh\" }}>\r\n        This is the forecast of {cityName}, {country} as of&nbsp;\r\n        <Moment unix format=\"LLL\" tz=\"UTC\">\r\n          {today}\r\n        </Moment>{\" \"}\r\n        (local time):\r\n      </p>\r\n      <div className=\"card\">\r\n        <div className=\"card-header lead\">3-hour forecast:</div>\r\n        <div className=\"card-body d-flex flex-column overflow-auto \">\r\n          <ResponsiveContainer width=\"98%\" height={300}>\r\n            <LineChart data={todayForecastChart}>\r\n              <Line\r\n                type=\"monotone\"\r\n                dataKey=\"temp\"\r\n                stroke=\"#8884d8\"\r\n                name=\"Temperature\"\r\n                des\r\n              />\r\n              <XAxis dataKey=\"time\" />\r\n              <YAxis\r\n                width={40}\r\n                label={() => {\r\n                  return (\r\n                    <Text\r\n                      x={-35}\r\n                      y={30}\r\n                      dx={50}\r\n                      dy={150}\r\n                      offset={0}\r\n                      angle={-90}\r\n                    >\r\n                      Temperature\r\n                    </Text>\r\n                  );\r\n                }}\r\n              />\r\n              <Tooltip />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n\r\n          {/* map each weather to one entry */}\r\n          {todayForecast.map((data) => (\r\n            <div\r\n              key={data.dt_txt}\r\n              className=\"d-flex flex-row\r\n              align-items-center\"\r\n            >\r\n              <p className=\"h5 mb-0\">\r\n                <Moment unix format=\"HH:mm\" tz=\"UTC\">\r\n                  {/* convert to local timezone */}\r\n                  {data.dt + timeZone}\r\n                </Moment>\r\n                :\r\n              </p>\r\n              <img\r\n                src={`http://openweathermap.org/img/wn/${data.weather[0].icon}.png`}\r\n                alt=\"weather condition\"\r\n              ></img>\r\n              <p className=\"fw-light fs-5 mb-0\">\r\n                {Math.round(data.main.temp)}°{displayTemp} -{\" \"}\r\n                {capitalizeFirstLetter(data.weather[0].description)}. Feels\r\n                like: {Math.round(data.main.feels_like)}°{displayTemp}.\r\n              </p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* for 5 days forecast */}\r\n      <div className=\"card mt-3\">\r\n        <div className=\"card-header lead\">Next 5 days forecast:</div>\r\n        <div className=\"card-body d-flex flex-column overflow-auto \">\r\n          <ResponsiveContainer width=\"98%\" height={300}>\r\n            <LineChart data={fiveDaysForecast}>\r\n              <Line\r\n                type=\"monotone\"\r\n                dataKey=\"high\"\r\n                stroke=\"#8884d8\"\r\n                name=\"Expected high temperature\"\r\n                des\r\n              />\r\n              <XAxis dataKey=\"date\" />\r\n              <YAxis\r\n                width={40}\r\n                label={() => {\r\n                  return (\r\n                    <Text\r\n                      x={-35}\r\n                      y={30}\r\n                      dx={50}\r\n                      dy={150}\r\n                      offset={0}\r\n                      angle={-90}\r\n                    >\r\n                      Temperature\r\n                    </Text>\r\n                  );\r\n                }}\r\n              />\r\n              <Tooltip />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n        {fiveDaysForecast.map((data) => (\r\n          <div\r\n            key={data.date}\r\n            className=\"d-flex flex-row\r\n              align-items-center justify-content-center mx-2\"\r\n          >\r\n            <p className=\"h5 mb-0\">{data.date}:&nbsp;</p>\r\n            {/* <img\r\n              src={`http://openweathermap.org/img/wn/${data.weather[0].icon}.png`}\r\n              alt=\"weather condition\"\r\n            ></img> */}\r\n            <span className=\"fw-light mb-0 fs-5\">\r\n              High:&nbsp;\r\n              {Math.round(data.high)}°{displayTemp} - Low:&nbsp;\r\n              {Math.round(data.low)}°{displayTemp}.\r\n            </span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Container, Button, ListGroup } from \"react-bootstrap\";\r\nimport \"moment-timezone\";\r\nimport { Route, Switch, Link, Redirect, HashRouter } from \"react-router-dom\";\r\nimport CurrentWeather from \"./CurrentWeather\";\r\nimport FiveDaysWeather from \"./FiveDaysWeather\";\r\n\r\nexport default function Weather({\r\n  weather,\r\n  unit,\r\n  handleRefresh,\r\n  handleChangeReport,\r\n  forecast,\r\n}) {\r\n  //state for which component is active\r\n  //0 is for current weather, 1 is for 5 days forecast\r\n  const [active, setActive] = useState(0);\r\n  const [classNameCurr, setClassNameCurr] = useState();\r\n  const [classNameFiveDays, setClassNameFiveDays] = useState();\r\n\r\n  //check for which link is active, then change the text color using the class name\r\n  useEffect(() => {\r\n    if (active === 0) {\r\n      //the first link is active, set the text to white the the other to black\r\n      setClassNameCurr(\"text-light text-center col\");\r\n      setClassNameFiveDays(\"text-dark text-center col\");\r\n    } else {\r\n      setClassNameCurr(\"text-dark text-center col\");\r\n      setClassNameFiveDays(\"text-light text-center col\");\r\n    }\r\n  }, [active]);\r\n\r\n  //return null if no weather\r\n  if (\r\n    weather &&\r\n    Object.keys(weather).length === 0 &&\r\n    weather.constructor === Object\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Container fluid className=\"justify-content-center border bg-light\">\r\n      {/* use a router to get different component */}\r\n      <HashRouter>\r\n        <ul className=\"row p-0\">\r\n          <ListGroup.Item\r\n            as={Link}\r\n            className={classNameCurr}\r\n            to=\"/currentweather\"\r\n            active={active === 0 ? true : false}\r\n            onClick={(e) => {\r\n              setActive(0);\r\n              handleChangeReport(\"current\");\r\n            }}\r\n          >\r\n            Current weather\r\n          </ListGroup.Item>\r\n          <ListGroup.Item\r\n            as={Link}\r\n            className={classNameFiveDays}\r\n            to=\"/fivedaysweather\"\r\n            active={active === 0 ? false : true}\r\n            onClick={() => {\r\n              setActive(1);\r\n              handleChangeReport(\"five days\");\r\n            }}\r\n          >\r\n            3-hour/5-day Forecast\r\n          </ListGroup.Item>\r\n        </ul>\r\n        {/* path to different components */}\r\n        <Switch>\r\n          <Route path=\"/currentweather\">\r\n            <CurrentWeather\r\n              data={weather}\r\n              unit={unit}\r\n              handleRefresh={handleRefresh}\r\n            />\r\n          </Route>\r\n          <Route path=\"/fivedaysweather\">\r\n            <FiveDaysWeather\r\n              data={forecast}\r\n              unit={unit}\r\n              handleRefresh={handleRefresh}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n        {/* automatically redirect to the current weather */}\r\n        <Redirect exact from=\"/\" to=\"/currentweather\" />\r\n      </HashRouter>\r\n      <div\r\n        className=\"d-flex flex-row align-items-center \r\n                    justify-content-center\"\r\n      >\r\n        <Button\r\n          style={{ marginTop: 10 }}\r\n          className=\"mb-2\"\r\n          onClick={handleRefresh}\r\n        >\r\n          Refresh\r\n        </Button>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n","import { Alert, Button } from 'react-bootstrap';\r\nimport React from 'react';\r\n\r\nexport default function ErrorInfo({ showAlert, handleClose, error }) {\r\n    if (showAlert) {\r\n        return (\r\n            <Alert variant=\"danger\">\r\n                <Alert.Heading>Error!</Alert.Heading>\r\n                <p>\r\n                    { error }\r\n                </p>\r\n                <hr />\r\n                <div className=\"d-flex justify-content-end\">\r\n                    <Button onClick={handleClose} variant=\"outline-success\">\r\n                        Close \r\n                    </Button>\r\n                </div>\r\n            </Alert>\r\n        )\r\n    }\r\n    return null;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/background-img.c5d3ef9c.jpg\";","import React, { useState, useEffect } from \"react\";\r\nimport { Collapse, Fade } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  getWeatherData,\r\n  getWeatherDataByCity,\r\n  get5daysWeatherData,\r\n  get5daysWeatherByCity,\r\n} from \"./Components/apis\";\r\nimport CitySearch from \"./Components/CitySearch\";\r\nimport Weather from \"./Components/Weather\";\r\nimport ErrorInfo from \"./Components/ErrorInfo\";\r\nimport axios from \"axios\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport backgroundImg from \"./img/background-img.jpg\";\r\n\r\nfunction App() {\r\n  const [city, setCity] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [weather, setWeather] = useState({});\r\n  const [forecast, setForecast] = useState({});\r\n  const [time, setTime] = useState(new Date().getHours());\r\n  //state for show/hide the weather component\r\n  const [openWeather, setOpenWeather] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  //state for the error we catch\r\n  const [error, setError] = useState(\"\");\r\n  //unit, metric by default\r\n  const [unit, setUnit] = useState(\"metric\");\r\n  //refresh the weather\r\n  const [refresh, setRefresh] = useState(false);\r\n  //current or forecast (5 days)\r\n  const [report, setReport] = useState(\"current\");\r\n  //show/hide the hello text\r\n  const [showInput, setShowInput] = useState(true);\r\n\r\n  useEffect(() => {\r\n    //get the current time\r\n    setTime(new Date().getHours());\r\n  }, [time]);\r\n\r\n  //this effect will be used every time the city or country or unit changes\r\n  useEffect(() => {\r\n    //only call the api when the user enter a city\r\n    if (city !== \"\" || refresh) {\r\n      //if user choose current weather, call the API to get the current weather\r\n      if (report === \"current\") {\r\n        if (country === \"\") {\r\n          //call the api and get the current weather\r\n          getWeatherDataByCity(city, unit)\r\n            .then((res) => {\r\n              console.log(\"calling the current weather api with only city\");\r\n              setWeather(res.data);\r\n              //reset the error\r\n              setError(\"\");\r\n            })\r\n            //catch error\r\n            .catch(function (error) {\r\n              //if we got error and respond\r\n              if (error.response) {\r\n                //set the error message accordingly\r\n                if (error.response.data.cod === \"404\") {\r\n                  setError(\"Please enter a valid city/country!\");\r\n                } else if (error.response.data.cod === \"429\") {\r\n                  setError(\r\n                    \"Sorry! The number of calls exceeded the server's allowance.\" +\r\n                      \" Please try again in a few minutes...\"\r\n                  );\r\n                }\r\n              } else if (error.request) {\r\n                setError(\r\n                  \"Sorry! We are not receiving any request from the server.\" +\r\n                    \" Please try again in a few minutes...\"\r\n                );\r\n              }\r\n            });\r\n        } else {\r\n          //call the api using city and country\r\n          getWeatherData(city, country, unit)\r\n            .then((res) => {\r\n              console.log(\r\n                \"calling the current weather api with city and country\"\r\n              );\r\n              setWeather(res.data);\r\n              //reset the error\r\n              setError(\"\");\r\n            })\r\n            //catch error\r\n            .catch(function (error) {\r\n              //if we got error\r\n              if (error.response) {\r\n                //set the error message accordingly\r\n                if (error.response.data.cod === \"404\") {\r\n                  setError(\"Please enter a valid city/country!\");\r\n                } else if (error.response.data.cod === \"429\") {\r\n                  setError(\r\n                    \"Sorry! The number of calls exceeded the server's allowance.\" +\r\n                      \" Please try again in a few minutes...\"\r\n                  );\r\n                }\r\n              } else if (error.request) {\r\n                // The request was made but no response was received\r\n                console.log(error.request);\r\n              } else if (error.request) {\r\n                setError(\r\n                  \"Sorry! We are not receiving any request from the server.\" +\r\n                    \" Please try again in a few minutes...\"\r\n                );\r\n              }\r\n            });\r\n        }\r\n      }\r\n      //else show the forecast using the forecast API\r\n      else if (report === \"five days\") {\r\n        if (country === \"\") {\r\n          //call the api and get the forecast\r\n          get5daysWeatherByCity(city, unit)\r\n            .then((res) => {\r\n              console.log(\"calling the FORECAST api with only city\");\r\n              setForecast(res.data);\r\n              //reset the error\r\n              setError(\"\");\r\n            })\r\n            //catch error\r\n            .catch(function (error) {\r\n              //if we got error and respond\r\n              if (error.response) {\r\n                //set the error message accordingly\r\n                if (error.response.data.cod === \"404\") {\r\n                  setError(\"Please enter a valid city/country!\");\r\n                } else if (error.response.data.cod === \"429\") {\r\n                  setError(\r\n                    \"Sorry! The number of calls exceeded the server's allowance.\" +\r\n                      \" Please try again in a few minutes...\"\r\n                  );\r\n                }\r\n              } else if (error.request) {\r\n                setError(\r\n                  \"Sorry! We are not receiving any request from the server.\" +\r\n                    \" Please try again in a few minutes...\"\r\n                );\r\n              }\r\n            });\r\n        } else {\r\n          //call the forecast api using city and country\r\n          get5daysWeatherData(city, country, unit)\r\n            .then((res) => {\r\n              console.log(\r\n                \"calling the FORECAST weather api with city and country\"\r\n              );\r\n              setForecast(res.data);\r\n              //reset the error\r\n              setError(\"\");\r\n            })\r\n            //catch error\r\n            .catch(function (error) {\r\n              //if we got error\r\n              if (error.response) {\r\n                //set the error message accordingly\r\n                if (error.response.data.cod === \"404\") {\r\n                  setError(\"Please enter a valid city/country!\");\r\n                } else if (error.response.data.cod === \"429\") {\r\n                  setError(\r\n                    \"Sorry! The number of calls exceeded the server's allowance.\" +\r\n                      \" Please try again in a few minutes...\"\r\n                  );\r\n                }\r\n              } else if (error.request) {\r\n                // The request was made but no response was received\r\n                console.log(error.request);\r\n              } else if (error.request) {\r\n                setError(\r\n                  \"Sorry! We are not receiving any request from the server.\" +\r\n                    \" Please try again in a few minutes...\"\r\n                );\r\n              }\r\n            });\r\n        }\r\n      }\r\n    }\r\n    return () => setRefresh(false);\r\n  }, [city, country, unit, refresh, report]);\r\n\r\n  //this effect will update page base onthe error and hide/show the weather section\r\n  useEffect(() => {\r\n    if (error !== \"\") {\r\n      setShowAlert(true);\r\n      setOpenWeather(false);\r\n    } else {\r\n      setShowAlert(false);\r\n      //if we have city only show the weather\r\n      if (city !== \"\") setOpenWeather(true);\r\n    }\r\n  }, [error, city]);\r\n\r\n  //every time the weather is open, hide the input section\r\n  useEffect(() => {\r\n    if (openWeather)\r\n      //hide the input section so the user have more space\r\n      setShowInput(false);\r\n    else setShowInput(true);\r\n  }, [openWeather]);\r\n\r\n  //handle the 401 since we cannot catch using the .catch\r\n  //using a 401 response interceptor\r\n  axios.interceptors.response.use(\r\n    (response) => {\r\n      return response;\r\n    },\r\n    function (error) {\r\n      if (\"401\" === error.response.status) {\r\n        setError(\"Sorry! API key error. Please try again later.\");\r\n      } else {\r\n        return Promise.reject(error);\r\n      }\r\n    }\r\n  );\r\n\r\n  //display the part of day according to the current time\r\n  let partOfDay;\r\n  if (time < 12 && time > 4) partOfDay = \"morning\";\r\n  else if (time < 18 && time > 12) partOfDay = \"afternoon\";\r\n  else partOfDay = \"evening\";\r\n\r\n  //handle the search btn on click\r\n  const handleSearchOnClick = () => {\r\n    //check if we have an error\r\n    if (error === \"\" && city !== \"\") {\r\n      //show the weather based on the city passed\r\n      //based on the value of the input field\r\n      setShowAlert(false);\r\n      setOpenWeather(!openWeather);\r\n    } else {\r\n      //else\r\n      //set the error\r\n      if (city === \"\") setError(\"You must enter a city first!\");\r\n      //show the alert\r\n      setShowAlert(!showAlert);\r\n    }\r\n  };\r\n\r\n  //handle city change\r\n  const handleCityChange = (newCity) => {\r\n    //set the new country\r\n    setCity(newCity);\r\n  };\r\n\r\n  //handle country change\r\n  const handleCountryChange = (newCountry) => {\r\n    //set the new country\r\n    setCountry(newCountry);\r\n  };\r\n\r\n  //close alert\r\n  const handleClose = () => {\r\n    setShowAlert(!showAlert);\r\n  };\r\n\r\n  const handleUnitOnChange = (e) => {\r\n    setUnit(e.target.value);\r\n  };\r\n\r\n  //handle the refresh btn\r\n  const handleRefresh = () => {\r\n    //set the state to call the api\r\n    setRefresh(true);\r\n  };\r\n\r\n  const handleChangeReport = (val) => {\r\n    //set the report to 5 days or current\r\n    setReport(val);\r\n  };\r\n\r\n  return (\r\n    <HashRouter basename=\"/\">\r\n      <div\r\n        className=\"d-flex justify-content-center align-items-center\r\n       flex-column h-100 overflow-hidden\"\r\n        style={{\r\n          backgroundImage: `url(${backgroundImg})`,\r\n          backgroundSize: \"cover\",\r\n          backgroundRepeat: \"no-repeat\",\r\n          backgroundPosition: \"center center\",\r\n        }}\r\n      >\r\n        <p className={showInput ? \"display-6 text-center w-100\" : \"d-none\"}>\r\n          Good {partOfDay}! Welcome to my weather app.\r\n        </p>\r\n\r\n        <CitySearch\r\n          //pass these functions and props down\r\n          handleSearchOnClick={handleSearchOnClick}\r\n          handleCityChange={handleCityChange}\r\n          handleCountryChange={handleCountryChange}\r\n          handleUnitOnChange={handleUnitOnChange}\r\n          openWeather={openWeather}\r\n          showAlert={showAlert}\r\n          unit={unit}\r\n          show={showInput}\r\n        />\r\n        <Fade in={showAlert}>\r\n          <div id=\"alert\">\r\n            <ErrorInfo\r\n              showAlert={showAlert}\r\n              handleClose={handleClose}\r\n              error={error}\r\n            />\r\n          </div>\r\n        </Fade>\r\n        <Collapse in={openWeather}>\r\n          <div id=\"weather\" className=\"overflow-auto\">\r\n            <Weather\r\n              weather={weather}\r\n              unit={unit}\r\n              forecast={forecast}\r\n              handleRefresh={handleRefresh}\r\n              handleChangeReport={handleChangeReport}\r\n            />\r\n          </div>\r\n        </Collapse>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}